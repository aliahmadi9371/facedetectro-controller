/****************************************************************************
**
** Namespace RealSvrOcxTcpLib generated by dumpcpp v5.12.2 using
** dumpcpp.exe {86683A0C-A3FA-4412-B044-51B918DBEE5C}
** from the type library C:\WINDOWS\SysWow64\RealSvrOcxTcp.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_REALSVROCXTCPLIB_H
#define QAX_DUMPCPP_REALSVROCXTCPLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef REALSVROCXTCPLIB_EXPORT
#define REALSVROCXTCPLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace RealSvrOcxTcpLib {


class REALSVROCXTCPLIB_EXPORT _DRealSvrOcxTcp : public QAxObject
{
public:
    _DRealSvrOcxTcp(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AboutBox

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline void AboutBox();

    /*
    Method CloseNetwork

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int CloseNetwork(int anHostPort);

    /*
    Method OpenNetwork

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int OpenNetwork(int anHostPort);

    /*
    Method SendResponse

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendResponse(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

    /*
    Method SendRtLogResponseV1

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendRtLogResponseV1(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

    /*
    Method SendRtLogResponseV3

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendRtLogResponseV3(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DRealSvrOcxTcpEvents

// Actual coclasses
class REALSVROCXTCPLIB_EXPORT RealSvrOcxTcp : public QAxWidget
{
public:
    RealSvrOcxTcp(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{fe364b34-c0f4-42fe-8fa1-c8fe62208946}"));
    }

    /*
    Method AboutBox

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline void AboutBox();

    /*
    Method CloseNetwork

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int CloseNetwork(int anHostPort);

    /*
    Method OpenNetwork

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int OpenNetwork(int anHostPort);

    /*
    Method SendResponse

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendResponse(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

    /*
    Method SendRtLogResponseV1

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendRtLogResponseV1(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

    /*
    Method SendRtLogResponseV3

    For more information, see help context 0 in C:\WINDOWS\SysWow64\RealSvrOcxTcp.hlp.
    */
    inline int SendRtLogResponseV3(const QString& astrClientIP, int anClientPort, const QString& astrResponse);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_REALSVROCXTCPLIB_NOINLINES
inline void _DRealSvrOcxTcp::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int _DRealSvrOcxTcp::CloseNetwork(int anHostPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&anHostPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int _DRealSvrOcxTcp::OpenNetwork(int anHostPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&anHostPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int _DRealSvrOcxTcp::SendResponse(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int _DRealSvrOcxTcp::SendRtLogResponseV1(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int _DRealSvrOcxTcp::SendRtLogResponseV3(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline void RealSvrOcxTcp::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline int RealSvrOcxTcp::CloseNetwork(int anHostPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&anHostPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int RealSvrOcxTcp::OpenNetwork(int anHostPort)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&anHostPort};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int RealSvrOcxTcp::SendResponse(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline int RealSvrOcxTcp::SendRtLogResponseV1(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline int RealSvrOcxTcp::SendRtLogResponseV3(const QString& astrClientIP, int anClientPort, const QString& astrResponse)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&astrClientIP, (void*)&anClientPort, (void*)&astrResponse};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<RealSvrOcxTcpLib::_DRealSvrOcxTcp, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<RealSvrOcxTcpLib::_DRealSvrOcxTcp*>(t)->RealSvrOcxTcpLib::_DRealSvrOcxTcp::~_DRealSvrOcxTcp();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) RealSvrOcxTcpLib::_DRealSvrOcxTcp;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const RealSvrOcxTcpLib::_DRealSvrOcxTcp*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<RealSvrOcxTcpLib::_DRealSvrOcxTcp*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<RealSvrOcxTcpLib::RealSvrOcxTcp, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<RealSvrOcxTcpLib::RealSvrOcxTcp*>(t)->RealSvrOcxTcpLib::RealSvrOcxTcp::~RealSvrOcxTcp();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) RealSvrOcxTcpLib::RealSvrOcxTcp;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const RealSvrOcxTcpLib::RealSvrOcxTcp*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<RealSvrOcxTcpLib::RealSvrOcxTcp*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

