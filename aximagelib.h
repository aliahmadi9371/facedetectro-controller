/****************************************************************************
**
** Namespace AXIMAGELib generated by dumpcpp v5.12.2 using
** dumpcpp.exe {4FED1AC3-6CF3-11D6-BB83-9FDD9223647D}
** from the type library C:\WINDOWS\SysWow64\AxImage.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_AXIMAGELIB_H
#define QAX_DUMPCPP_AXIMAGELIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef AXIMAGELIB_EXPORT
#define AXIMAGELIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace AXIMAGELib {


class AXIMAGELIB_EXPORT _DAxImage : public QAxObject
{
public:
    _DAxImage(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BackColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property Border

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Border() const; //Returns the value of Border
    inline void SetBorder(bool value); //Sets the value of the Border property

    /*
    Property Stretch

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Stretch() const; //Returns the value of Stretch
    inline void SetStretch(bool value); //Sets the value of the Stretch property

    /*
    Method Clear

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void Clear(int val);

    /*
    Method Colorize

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Colorize(int hue, int sat);

    /*
    Method CopyToHandle

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CopyToHandle();

    /*
    Method Create

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Create(int width, int height, int bpp);

    /*
    Method CreateFromBitmap

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CreateFromBitmap(int bitmap);

    /*
    Method CreateFromHandle

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CreateFromHandle(int handle);

    /*
    Method Crop

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Crop(int left, int top, int right, int bottom);

    /*
    Method DecreaseBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool DecreaseBpp(int bpp, int errordiffusion);

    /*
    Method Dilate

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Dilate(int Ksize);

    /*
    Method Dither

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Dither(int method);

    /*
    Method Erode

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Erode(int Ksize);

    /*
    Method Filter

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Filter(int& kernel, int Ksize, int Kfactor, int Koffset);

    /*
    Method Flip

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Flip();

    /*
    Method GetBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetBpp();

    /*
    Method GetColorType

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetColorType();

    /*
    Method GetFrame

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetFrame();

    /*
    Method GetHeight

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetHeight();

    /*
    Method GetJpegQuality

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetJpegQuality();

    /*
    Method GetLastError

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QString GetLastError();

    /*
    Method GetNumColors

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetNumColors();

    /*
    Method GetNumFrames

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetNumFrames();

    /*
    Method GetPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPalette();

    /*
    Method GetPaletteColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetPaletteColor(int index);

    /*
    Method GetPaletteSize

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPaletteSize();

    /*
    Method GetPixelColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetPixelColor(int x, int y);

    /*
    Method GetPixelIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPixelIndex(int x, int y);

    /*
    Method GetTransColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetTransColor();

    /*
    Method GetTransIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetTransIndex();

    /*
    Method GetType

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetType();

    /*
    Method GetWidth

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetWidth();

    /*
    Method GetXDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetXDPI();

    /*
    Method GetYDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetYDPI();

    /*
    Method GrayScale

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool GrayScale();

    /*
    Method HuePalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void HuePalette(double correction);

    /*
    Method IncreaseBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IncreaseBpp(int bpp);

    /*
    Method IsGrayScale

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsGrayScale();

    /*
    Method IsIndexed

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsIndexed();

    /*
    Method IsInside

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsInside(int x, int y);

    /*
    Method IsValid

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsValid();

    /*
    Method Light

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Light(int Light, int contrast);

    /*
    Method Load

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Load(const QString& FileName, int ImageType);

    /*
    Method MakeBitmap

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int MakeBitmap(int hdc);

    /*
    Method Mean

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline double Mean();

    /*
    Method Mirror

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Mirror();

    /*
    Method Negative

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Negative();

    /*
    Method Refresh

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void Refresh();

    /*
    Method Resample

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Resample(int newx, int newy, int fast);

    /*
    Method Rotate

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Rotate(double angle);

    /*
    Method Rotate180

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Rotate180();

    /*
    Method RotateLeft

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool RotateLeft();

    /*
    Method RotateRight

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool RotateRight();

    /*
    Method Save

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Save(const QString& FileName, int ImageType);

    /*
    Method SetFrame

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetFrame(int nFrame);

    /*
    Method SetGray8Image

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetGray8Image(QVariant& image, int width, int height);

    /*
    Method SetGrayPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetGrayPalette();

    /*
    Method SetJpegQuality

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetJpegQuality(int q);

    /*
    Method SetJpgImage

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetJpgImage(QVariant& image);

    /*
    Method SetPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPalette(int& pal, int ncolors);

    /*
    Method SetPaletteIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPaletteIndex(int index, const QColor& color);

    /*
    Method SetPixelColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPixelColor(int x, int y, const QColor& color);

    /*
    Method SetPixelIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPixelIndex(int x, int y, int index);

    /*
    Method SetStdPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetStdPalette();

    /*
    Method SetTransColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetTransColor(int color);

    /*
    Method SetTransIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetTransIndex(int index);

    /*
    Method SetXDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetXDPI(int dpi);

    /*
    Method SetYDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetYDPI(int dpi);

    /*
    Method StringToFormat

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int StringToFormat(const QString& extension);

    /*
    Method SwapIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SwapIndex(int index1, int index2);

    /*
    Method Threshold

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Threshold(int level);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DAxImageEvents

// Actual coclasses
class AXIMAGELIB_EXPORT AxImage : public QAxWidget
{
public:
    AxImage(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{4fed1ac6-6cf3-11d6-bb83-9fdd9223647d}"));
    }

    /*
    Property BackColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor BackColor() const; //Returns the value of BackColor
    inline void SetBackColor(const QColor& value); //Sets the value of the BackColor property

    /*
    Property Border

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Border() const; //Returns the value of Border
    inline void SetBorder(bool value); //Sets the value of the Border property

    /*
    Property Stretch

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Stretch() const; //Returns the value of Stretch
    inline void SetStretch(bool value); //Sets the value of the Stretch property

    /*
    Method Clear

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void Clear(int val);

    /*
    Method Colorize

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Colorize(int hue, int sat);

    /*
    Method CopyToHandle

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CopyToHandle();

    /*
    Method Create

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Create(int width, int height, int bpp);

    /*
    Method CreateFromBitmap

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CreateFromBitmap(int bitmap);

    /*
    Method CreateFromHandle

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int CreateFromHandle(int handle);

    /*
    Method Crop

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Crop(int left, int top, int right, int bottom);

    /*
    Method DecreaseBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool DecreaseBpp(int bpp, int errordiffusion);

    /*
    Method Dilate

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Dilate(int Ksize);

    /*
    Method Dither

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Dither(int method);

    /*
    Method Erode

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Erode(int Ksize);

    /*
    Method Filter

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Filter(int& kernel, int Ksize, int Kfactor, int Koffset);

    /*
    Method Flip

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Flip();

    /*
    Method GetBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetBpp();

    /*
    Method GetColorType

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetColorType();

    /*
    Method GetFrame

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetFrame();

    /*
    Method GetHeight

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetHeight();

    /*
    Method GetJpegQuality

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetJpegQuality();

    /*
    Method GetLastError

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QString GetLastError();

    /*
    Method GetNumColors

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetNumColors();

    /*
    Method GetNumFrames

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetNumFrames();

    /*
    Method GetPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPalette();

    /*
    Method GetPaletteColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetPaletteColor(int index);

    /*
    Method GetPaletteSize

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPaletteSize();

    /*
    Method GetPixelColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetPixelColor(int x, int y);

    /*
    Method GetPixelIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetPixelIndex(int x, int y);

    /*
    Method GetTransColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline QColor GetTransColor();

    /*
    Method GetTransIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetTransIndex();

    /*
    Method GetType

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetType();

    /*
    Method GetWidth

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetWidth();

    /*
    Method GetXDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetXDPI();

    /*
    Method GetYDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int GetYDPI();

    /*
    Method GrayScale

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool GrayScale();

    /*
    Method HuePalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void HuePalette(double correction);

    /*
    Method IncreaseBpp

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IncreaseBpp(int bpp);

    /*
    Method IsGrayScale

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsGrayScale();

    /*
    Method IsIndexed

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsIndexed();

    /*
    Method IsInside

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsInside(int x, int y);

    /*
    Method IsValid

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool IsValid();

    /*
    Method Light

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Light(int Light, int contrast);

    /*
    Method Load

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Load(const QString& FileName, int ImageType);

    /*
    Method MakeBitmap

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int MakeBitmap(int hdc);

    /*
    Method Mean

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline double Mean();

    /*
    Method Mirror

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Mirror();

    /*
    Method Negative

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Negative();

    /*
    Method Refresh

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void Refresh();

    /*
    Method Resample

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Resample(int newx, int newy, int fast);

    /*
    Method Rotate

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Rotate(double angle);

    /*
    Method Rotate180

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Rotate180();

    /*
    Method RotateLeft

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool RotateLeft();

    /*
    Method RotateRight

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool RotateRight();

    /*
    Method Save

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int Save(const QString& FileName, int ImageType);

    /*
    Method SetFrame

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetFrame(int nFrame);

    /*
    Method SetGray8Image

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetGray8Image(QVariant& image, int width, int height);

    /*
    Method SetGrayPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetGrayPalette();

    /*
    Method SetJpegQuality

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetJpegQuality(int q);

    /*
    Method SetJpgImage

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetJpgImage(QVariant& image);

    /*
    Method SetPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPalette(int& pal, int ncolors);

    /*
    Method SetPaletteIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPaletteIndex(int index, const QColor& color);

    /*
    Method SetPixelColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPixelColor(int x, int y, const QColor& color);

    /*
    Method SetPixelIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetPixelIndex(int x, int y, int index);

    /*
    Method SetStdPalette

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetStdPalette();

    /*
    Method SetTransColor

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetTransColor(int color);

    /*
    Method SetTransIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetTransIndex(int index);

    /*
    Method SetXDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetXDPI(int dpi);

    /*
    Method SetYDPI

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SetYDPI(int dpi);

    /*
    Method StringToFormat

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline int StringToFormat(const QString& extension);

    /*
    Method SwapIndex

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline void SwapIndex(int index1, int index2);

    /*
    Method Threshold

    For more information, see help context 0 in C:\WINDOWS\System32\AxImage.hlp.
    */
    inline bool Threshold(int level);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_AXIMAGELIB_NOINLINES
inline QColor _DAxImage::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void _DAxImage::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline bool _DAxImage::Border() const
{
    QVariant qax_result = property("Border");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DAxImage::SetBorder(bool value){ setProperty("Border", QVariant(value)); }

inline bool _DAxImage::Stretch() const
{
    QVariant qax_result = property("Stretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DAxImage::SetStretch(bool value){ setProperty("Stretch", QVariant(value)); }

inline void _DAxImage::Clear(int val)
{
    void *_a[] = {0, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline bool _DAxImage::Colorize(int hue, int sat)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hue, (void*)&sat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int _DAxImage::CopyToHandle()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline int _DAxImage::Create(int width, int height, int bpp)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&width, (void*)&height, (void*)&bpp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int _DAxImage::CreateFromBitmap(int bitmap)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitmap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline int _DAxImage::CreateFromHandle(int handle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool _DAxImage::Crop(int left, int top, int right, int bottom)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&left, (void*)&top, (void*)&right, (void*)&bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool _DAxImage::DecreaseBpp(int bpp, int errordiffusion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bpp, (void*)&errordiffusion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool _DAxImage::Dilate(int Ksize)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ksize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool _DAxImage::Dither(int method)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&method};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool _DAxImage::Erode(int Ksize)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ksize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool _DAxImage::Filter(int& kernel, int Ksize, int Kfactor, int Koffset)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&kernel, (void*)&Ksize, (void*)&Kfactor, (void*)&Koffset};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool _DAxImage::Flip()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline int _DAxImage::GetBpp()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int _DAxImage::GetColorType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int _DAxImage::GetFrame()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int _DAxImage::GetHeight()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline int _DAxImage::GetJpegQuality()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString _DAxImage::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline int _DAxImage::GetNumColors()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline int _DAxImage::GetNumFrames()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline int _DAxImage::GetPalette()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline QColor _DAxImage::GetPaletteColor(int index)
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline int _DAxImage::GetPaletteSize()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QColor _DAxImage::GetPixelColor(int x, int y)
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline int _DAxImage::GetPixelIndex(int x, int y)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline QColor _DAxImage::GetTransColor()
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline int _DAxImage::GetTransIndex()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline int _DAxImage::GetType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline int _DAxImage::GetWidth()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline int _DAxImage::GetXDPI()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int _DAxImage::GetYDPI()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool _DAxImage::GrayScale()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline void _DAxImage::HuePalette(double correction)
{
    void *_a[] = {0, (void*)&correction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline bool _DAxImage::IncreaseBpp(int bpp)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bpp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool _DAxImage::IsGrayScale()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool _DAxImage::IsIndexed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool _DAxImage::IsInside(int x, int y)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool _DAxImage::IsValid()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool _DAxImage::Light(int Light, int contrast)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Light, (void*)&contrast};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline int _DAxImage::Load(const QString& FileName, int ImageType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ImageType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline int _DAxImage::MakeBitmap(int hdc)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hdc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline double _DAxImage::Mean()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool _DAxImage::Mirror()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool _DAxImage::Negative()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline void _DAxImage::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline bool _DAxImage::Resample(int newx, int newy, int fast)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&newx, (void*)&newy, (void*)&fast};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool _DAxImage::Rotate(double angle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&angle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool _DAxImage::Rotate180()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool _DAxImage::RotateLeft()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool _DAxImage::RotateRight()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int _DAxImage::Save(const QString& FileName, int ImageType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ImageType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline void _DAxImage::SetFrame(int nFrame)
{
    void *_a[] = {0, (void*)&nFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void _DAxImage::SetGray8Image(QVariant& image, int width, int height)
{
    void *_a[] = {0, (void*)&image, (void*)&width, (void*)&height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void _DAxImage::SetGrayPalette()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void _DAxImage::SetJpegQuality(int q)
{
    void *_a[] = {0, (void*)&q};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void _DAxImage::SetJpgImage(QVariant& image)
{
    void *_a[] = {0, (void*)&image};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void _DAxImage::SetPalette(int& pal, int ncolors)
{
    void *_a[] = {0, (void*)&pal, (void*)&ncolors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void _DAxImage::SetPaletteIndex(int index, const QColor& color)
{
    void *_a[] = {0, (void*)&index, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void _DAxImage::SetPixelColor(int x, int y, const QColor& color)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void _DAxImage::SetPixelIndex(int x, int y, int index)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void _DAxImage::SetStdPalette()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void _DAxImage::SetTransColor(int color)
{
    void *_a[] = {0, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void _DAxImage::SetTransIndex(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void _DAxImage::SetXDPI(int dpi)
{
    void *_a[] = {0, (void*)&dpi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void _DAxImage::SetYDPI(int dpi)
{
    void *_a[] = {0, (void*)&dpi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline int _DAxImage::StringToFormat(const QString& extension)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extension};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline void _DAxImage::SwapIndex(int index1, int index2)
{
    void *_a[] = {0, (void*)&index1, (void*)&index2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline bool _DAxImage::Threshold(int level)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}


inline QColor AxImage::BackColor() const
{
    QVariant qax_result = property("BackColor");
    Q_ASSERT(qax_result.isValid());
    return *(QColor*)qax_result.constData();
}
inline void AxImage::SetBackColor(const QColor& value){ setProperty("BackColor", QVariant(value)); }

inline bool AxImage::Border() const
{
    QVariant qax_result = property("Border");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void AxImage::SetBorder(bool value){ setProperty("Border", QVariant(value)); }

inline bool AxImage::Stretch() const
{
    QVariant qax_result = property("Stretch");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void AxImage::SetStretch(bool value){ setProperty("Stretch", QVariant(value)); }

inline void AxImage::Clear(int val)
{
    void *_a[] = {0, (void*)&val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline bool AxImage::Colorize(int hue, int sat)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hue, (void*)&sat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline int AxImage::CopyToHandle()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int AxImage::Create(int width, int height, int bpp)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&width, (void*)&height, (void*)&bpp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline int AxImage::CreateFromBitmap(int bitmap)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bitmap};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline int AxImage::CreateFromHandle(int handle)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&handle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool AxImage::Crop(int left, int top, int right, int bottom)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&left, (void*)&top, (void*)&right, (void*)&bottom};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool AxImage::DecreaseBpp(int bpp, int errordiffusion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bpp, (void*)&errordiffusion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool AxImage::Dilate(int Ksize)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ksize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool AxImage::Dither(int method)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&method};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool AxImage::Erode(int Ksize)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ksize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool AxImage::Filter(int& kernel, int Ksize, int Kfactor, int Koffset)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&kernel, (void*)&Ksize, (void*)&Kfactor, (void*)&Koffset};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool AxImage::Flip()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline int AxImage::GetBpp()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline int AxImage::GetColorType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline int AxImage::GetFrame()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline int AxImage::GetHeight()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline int AxImage::GetJpegQuality()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline QString AxImage::GetLastError()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline int AxImage::GetNumColors()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline int AxImage::GetNumFrames()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline int AxImage::GetPalette()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline QColor AxImage::GetPaletteColor(int index)
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline int AxImage::GetPaletteSize()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline QColor AxImage::GetPixelColor(int x, int y)
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline int AxImage::GetPixelIndex(int x, int y)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline QColor AxImage::GetTransColor()
{
    QColor qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline int AxImage::GetTransIndex()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline int AxImage::GetType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline int AxImage::GetWidth()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline int AxImage::GetXDPI()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline int AxImage::GetYDPI()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool AxImage::GrayScale()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline void AxImage::HuePalette(double correction)
{
    void *_a[] = {0, (void*)&correction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline bool AxImage::IncreaseBpp(int bpp)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&bpp};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool AxImage::IsGrayScale()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool AxImage::IsIndexed()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool AxImage::IsInside(int x, int y)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&x, (void*)&y};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool AxImage::IsValid()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool AxImage::Light(int Light, int contrast)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Light, (void*)&contrast};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline int AxImage::Load(const QString& FileName, int ImageType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ImageType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline int AxImage::MakeBitmap(int hdc)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&hdc};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline double AxImage::Mean()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool AxImage::Mirror()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool AxImage::Negative()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline void AxImage::Refresh()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline bool AxImage::Resample(int newx, int newy, int fast)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&newx, (void*)&newy, (void*)&fast};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline bool AxImage::Rotate(double angle)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&angle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool AxImage::Rotate180()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool AxImage::RotateLeft()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool AxImage::RotateRight()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline int AxImage::Save(const QString& FileName, int ImageType)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName, (void*)&ImageType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline void AxImage::SetFrame(int nFrame)
{
    void *_a[] = {0, (void*)&nFrame};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void AxImage::SetGray8Image(QVariant& image, int width, int height)
{
    void *_a[] = {0, (void*)&image, (void*)&width, (void*)&height};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void AxImage::SetGrayPalette()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void AxImage::SetJpegQuality(int q)
{
    void *_a[] = {0, (void*)&q};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void AxImage::SetJpgImage(QVariant& image)
{
    void *_a[] = {0, (void*)&image};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void AxImage::SetPalette(int& pal, int ncolors)
{
    void *_a[] = {0, (void*)&pal, (void*)&ncolors};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void AxImage::SetPaletteIndex(int index, const QColor& color)
{
    void *_a[] = {0, (void*)&index, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void AxImage::SetPixelColor(int x, int y, const QColor& color)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void AxImage::SetPixelIndex(int x, int y, int index)
{
    void *_a[] = {0, (void*)&x, (void*)&y, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void AxImage::SetStdPalette()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void AxImage::SetTransColor(int color)
{
    void *_a[] = {0, (void*)&color};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void AxImage::SetTransIndex(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void AxImage::SetXDPI(int dpi)
{
    void *_a[] = {0, (void*)&dpi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void AxImage::SetYDPI(int dpi)
{
    void *_a[] = {0, (void*)&dpi};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline int AxImage::StringToFormat(const QString& extension)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extension};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline void AxImage::SwapIndex(int index1, int index2)
{
    void *_a[] = {0, (void*)&index1, (void*)&index2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}

inline bool AxImage::Threshold(int level)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&level};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<AXIMAGELib::_DAxImage, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<AXIMAGELib::_DAxImage*>(t)->AXIMAGELib::_DAxImage::~_DAxImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) AXIMAGELib::_DAxImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const AXIMAGELib::_DAxImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<AXIMAGELib::_DAxImage*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<AXIMAGELib::AxImage, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<AXIMAGELib::AxImage*>(t)->AXIMAGELib::AxImage::~AxImage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) AXIMAGELib::AxImage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const AXIMAGELib::AxImage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<AXIMAGELib::AxImage*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

